pragma solidity ^0.4.2;

import "truffle/Assert.sol";
import "truffle/DeployedAddresses.sol";
import "../contracts/NeufundTestToken.sol";
import "../contracts/Crowdsale.sol";

contract TestCrowdsale {

  function testCrowdsaleCreation() {
    Crowdsale crowdsale = new Crowdsale(0x42, 1, 1, 1, Token(0x00));
  }

  function testAutoGeneratedPublicAccessors() {
    address ifSuccessfulSendTo = 0x42;
    uint fundingGoalInEthers = 1;
    uint durationInMinutes = 1;
    uint weiCostOfEachToken = 1;
    Token addressOfTokenUsedAsReward = Token(0x00);

    Crowdsale crowdsale = new Crowdsale(
        ifSuccessfulSendTo,
        fundingGoalInEthers,
        durationInMinutes,
        weiCostOfEachToken,
        addressOfTokenUsedAsReward
    );

    Assert.equal(crowdsale.beneficiary(), ifSuccessfulSendTo, "beneficiary");
    Assert.equal(crowdsale.fundingGoal(), fundingGoalInEthers * 1 ether, "fundingGoal");
    Assert.equal(crowdsale.amountRaised(), 0, "amountRaised");
    Assert.equal(crowdsale.deadline(), now + durationInMinutes * 1 minutes, "deadline");
    Assert.equal(crowdsale.price(), weiCostOfEachToken, "price");
    Assert.equal(crowdsale.tokenReward(), addressOfTokenUsedAsReward, "tokenReward");
  }
}
